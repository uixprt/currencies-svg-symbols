'use strict';

var fs = require('fs');
var path = require('path');

var mkdirp = require('mkdirp');
var async = require('async');
var chalk = require('chalk');
var filesize = require('filesize');
var SVGO = require('svgo');

module.exports = function (grunt) {

  // @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round
  function _round10 (value, exp) {
    // If the exp is undefined or zero...
    if (typeof exp === 'undefined' || +exp === 0) {
      return Math.round(value);
    }
    value = +value;
    exp = +exp;
    // If the value is not a number or the exp is not an integer...
    if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {
      return NaN;
    }
    // Shift
    value = value.toString().split('e');
    value = Math.round(+(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp)));
    // Shift back
    value = value.toString().split('e');
    return +(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp));
  }

  grunt.registerMultiTask('svgo', 'Optimize SVG files with SVGO.', function () {
    
    var done = this.async();
    var options = this.options({});
    var svgo = new SVGO(options);

    async.eachLimit(this.files, 10, function (file, next) {

      // make directory if does not exist
      mkdirp.sync(path.dirname(file.dest));

      // load svg string
      var original = fs.readFileSync(file.src[0], {
        encoding: 'utf8'
      });

      // optimize svg string
      svgo.optimize(original, function (optimized) {

        fs.writeFileSync(file.dest, optimized.data, {
          encoding: 'utf8'
        });

        var diff = original.length - optimized.data.length;
        var diffPercent = _round10(100 * (diff / original), -1)

        grunt.log.writeln(
          chalk.green('âœ” ') + file.src[0] + chalk.gray(' ->') +
          chalk.gray(' before=') + chalk.yellow(filesize(original.length)) +
          chalk.gray(' after=') + chalk.cyan(filesize(optimized.data.length)) +
          chalk.gray(' reduced=') + chalk.green.underline(filesize(diff) + '(' + diffPercent + '%)')
        );

        next();
      });
    }, function (error) {
      if (error) {
        grunt.warn(error);
        return done(error);
      }
      done();
    });
  });
};